apiVersion: apps/v1
kind: Deployment
metadata:
  name: kss-mcp-template
  namespace: kss-mcp
  labels:
    app: kss-mcp-template
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: kss-mcp-template
  template:
    metadata:
      labels:
        app: kss-mcp-template
        version: v1.0.0
    spec:
      imagePullSecrets:
      - name: docker-secret
      containers:
      - name: kss-mcp-template
        # Use versioned tag instead of latest for better stability
        image: docker-hosted.sebaoffice.ir/kss-mcp-template:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
          name: http
          protocol: TCP
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: "Production"
        - name: ASPNETCORE_URLS
          value: "http://+:5000"
        - name: TZ
          value: "UTC"
        # Logging Configuration
        - name: Logging__LogLevel__Default
          value: "Information"
        - name: Logging__LogLevel__Microsoft.AspNetCore
          value: "Warning"
        # Add any additional environment variables for external API keys if needed
        # - name: WEATHER_API_KEY
        #   valueFrom:
        #     secretKeyRef:
        #       name: kss-mcp-template-secrets
        #       key: weather-api-key
        #       optional: true
        # - name: COINGECKO_API_KEY
        #   valueFrom:
        #     secretKeyRef:
        #       name: kss-mcp-template-secrets
        #       key: coingecko-api-key
        #       optional: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /sse
            port: 5000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /sse
            port: 5000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: kss-mcp-template-service
  namespace: kss-mcp
  labels:
    app: kss-mcp-template
spec:
  selector:
    app: kss-mcp-template
  ports:
  - name: http
    port: 80
    targetPort: 5000
    protocol: TCP
  type: ClusterIP
  sessionAffinity: None
---
apiVersion: v1
kind: Secret
metadata:
  name: kss-mcp-template-secrets
  namespace: kss-mcp
type: Opaque
data:
  # Add base64 encoded API keys here if needed
  # Example: echo -n "your-api-key" | base64
  # weather-api-key: ""
  # coingecko-api-key: ""
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kss-mcp-template-ingress
  namespace: kss-mcp
  annotations:
    haproxy.org/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    # Let cert-manager handle ACME challenges automatically
    acme.cert-manager.io/http01-edit-in-place: "true"
    haproxy.org/proxy-body-size: "10m"
    haproxy.org/proxy-read-timeout: "60"
    haproxy.org/proxy-send-timeout: "60"
    haproxy.org/rate-limit: "200"
    haproxy.org/rate-limit-window: "1m"
    haproxy.org/proxy-buffer-size: "8k"
    haproxy.org/proxy-buffers-number: "4"
spec:
  ingressClassName: haproxy
  tls:
  - hosts:
    - mcp.sebaoffice.ir
    secretName: kss-mcp-template-tls
  rules:
  - host: mcp.sebaoffice.ir
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kss-mcp-template-service
            port:
              number: 80
